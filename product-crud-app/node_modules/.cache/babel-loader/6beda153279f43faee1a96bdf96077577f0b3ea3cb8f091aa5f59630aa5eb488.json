{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst app = express();\nconst port = 5000;\napp.use(cors());\napp.use(bodyParser.json());\n\n// Replace with your MongoDB connection string\nconst dbURI = 'mongodb+srv://Invento';\nmongoose.connect(dbURI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected')).catch(err => console.log(err));\nconst productSchema = new mongoose.Schema({\n  name: String,\n  description: String,\n  price: Number,\n  category: String\n});\nconst Product = mongoose.model('Product', productSchema);\napp.post('/restapi', async (req, res) => {\n  try {\n    const product = new Product(req.body);\n    await product.save();\n    res.status(201).send(product);\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","bodyParser","cors","app","port","use","json","dbURI","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","productSchema","Schema","name","String","description","price","Number","category","Product","model","post","req","res","product","body","save","status","send","error","listen"],"sources":["C:/Users/user/Desktop/REACT/product-crud-app/src/Component/ProductForm.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Replace with your MongoDB connection string\r\nconst dbURI = 'mongodb+srv://Invento';\r\n\r\nmongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('MongoDB connected'))\r\n  .catch(err => console.log(err));\r\n\r\nconst productSchema = new mongoose.Schema({\r\n  name: String,\r\n  description: String,\r\n  price: Number,\r\n  category: String\r\n});\r\n\r\nconst Product = mongoose.model('Product', productSchema);\r\n\r\napp.post('/restapi', async (req, res) => {\r\n  try {\r\n    const product = new Product(req.body);\r\n    await product.save();\r\n    res.status(201).send(product);\r\n  } catch (error) {\r\n    res.status(400).send(error);\r\n  }\r\n});\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACE,GAAG,CAACJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACA,MAAMC,KAAK,GAAG,uBAAuB;AAErCP,QAAQ,CAACQ,OAAO,CAACD,KAAK,EAAE;EAAEE,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC,CACzEC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAC5CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC,CAAC;AAEjC,MAAMC,aAAa,GAAG,IAAIhB,QAAQ,CAACiB,MAAM,CAAC;EACxCC,IAAI,EAAEC,MAAM;EACZC,WAAW,EAAED,MAAM;EACnBE,KAAK,EAAEC,MAAM;EACbC,QAAQ,EAAEJ;AACZ,CAAC,CAAC;AAEF,MAAMK,OAAO,GAAGxB,QAAQ,CAACyB,KAAK,CAAC,SAAS,EAAET,aAAa,CAAC;AAExDb,GAAG,CAACuB,IAAI,CAAC,UAAU,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACvC,IAAI;IACF,MAAMC,OAAO,GAAG,IAAIL,OAAO,CAACG,GAAG,CAACG,IAAI,CAAC;IACrC,MAAMD,OAAO,CAACE,IAAI,CAAC,CAAC;IACpBH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACJ,OAAO,CAAC;EAC/B,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdN,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACC,KAAK,CAAC;EAC7B;AACF,CAAC,CAAC;AAEF/B,GAAG,CAACgC,MAAM,CAAC/B,IAAI,EAAE,MAAM;EACrBQ,OAAO,CAACC,GAAG,CAAE,0BAAyBT,IAAK,EAAC,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}